import type { Database } from "./db/database.types";

/**
 * DTO and Command Model definitions for the API endpoints.
 * They are derived from the underlying database entities.
 */

/**
 * FlashcardDTO represents a flashcard object as returned by the API endpoints.
 * It is based on the Database["public"]["Tables"]["flashcards"]["Row"] type, with the user_id omitted.
 */
export type FlashcardDTO = Omit<Database["public"]["Tables"]["flashcards"]["Row"], "user_id">;

/**
 * CreateFlashcardCommand is used to create an individual flashcard.
 * It enforces the allowed values for the source field.
 */
export type FlashcardSource = "manual" | "ai-full" | "ai-edited";

export interface CreateFlashcardCommand {
  front: string;
  back: string;
  source: FlashcardSource;
  generation_id?: number;
};

/**
 * PostFlashcardsCommand represents the request payload for creating flashcards (POST /api/flashcards).
 */
export interface PostFlashcardsCommand {
  flashcards: CreateFlashcardCommand[];
}

/**
 * PostFlashcardsResponseDTO represents the response payload after creating flashcards.
 */
export interface PostFlashcardsResponseDTO {
  data: FlashcardDTO[];
  meta: {
    created_count: number;
  };
}

/**
 * UpdateFlashcardDTO represents the payload for updating an existing flashcard (PATCH /api/flashcards/:id).
 * Only the front and back fields are updatable.
 */
export type UpdateFlashcardDTO = Partial<Pick<Database["public"]["Tables"]["flashcards"]["Row"], "front" | "back">>;

/**
 * PaginationMeta defines common pagination metadata used in list responses.
 */
export interface PaginationMeta {
  total: number;
  page: number;
  limit: number;
  pages: number;
}

/**
 * FlashcardsListResponseDTO represents the response payload for listing flashcards (GET /api/flashcards).
 */
export interface FlashcardsListResponseDTO {
  data: FlashcardDTO[];
  meta: PaginationMeta;
}

/**
 * CreateGenerationCommandDTO represents the request payload for generating flashcards (POST /api/generations).
 */
export interface CreateGenerationCommandDTO {
  source_text: string;
}

/**
 * FlashcardProposalDTO represents a flashcard proposal generated by the AI during a generation process.
 */
export interface FlashcardProposalDTO {
  id: number;
  front: string;
  back: string;
  source: "ai-full";
}

/**
 * GenerationWithProposalsDTO represents the response payload for creating a generation (POST /api/generations).
 * It includes metadata about the generation and an array of flashcard proposals.
 */
export interface GenerationWithProposalsDTO {
  id: number;
  model: string;
  generated_count: number;
  source_text_length: number;
  generation_duration: number;
  created_at: string;
  status: "processing" | "completed" | "error";
  flashcards_proposals: FlashcardProposalDTO[];
}

/**
 * GenerationDTO represents a generation record as returned by GET /api/generations and GET /api/generations/:id.
 * It is based on Database["public"]["Tables"]["generations"]["Row"] with non-exposed fields omitted.
 */
export type GenerationDTO = Omit<Database["public"]["Tables"]["generations"]["Row"], "user_id" | "source_text_hash">;

/**
 * GenerationsListResponseDTO represents the response payload for listing generations (GET /api/generations).
 */
export interface GenerationsListResponseDTO {
  data: GenerationDTO[];
  meta: PaginationMeta;
}

/**
 * GenerationApprovalInputDTO represents the input for approving an individual flashcard from a generation.
 */
export interface GenerationApprovalInputDTO {
  id: number;
  front?: string;
  back?: string;
}

/**
 * GenerationApprovalCommandDTO represents the request payload for approving flashcards from a generation (POST /api/generations/:id/approve).
 */
export interface GenerationApprovalCommandDTO {
  flashcards: GenerationApprovalInputDTO[];
}

/**
 * GenerationApprovalResponseDTO represents the response payload after approving flashcards.
 * It contains the approved count and updated generation metadata.
 */
export interface GenerationApprovalResponseDTO {
  approved_count: number;
  generation: Pick<GenerationDTO, "id" | "accepted_unedited_count" | "accepted_edited_count" | "updated_at">;
} 